@{
    ViewData["Title"] = "Post Detail";
    int postId = ViewBag.PostId != null ? (int)ViewBag.PostId : 1;

    // Sample post data - in a real app, this would come from your database
    var posts = new[]
    {
        new { Image = "https://upload.wikimedia.org/wikipedia/commons/5/56/White_shark.jpg", Location = "Bali, Indonesia", Caption = "Exploring the beautiful beaches and rice terraces of Bali!", Likes = 24 },
        new { Image = "https://source.unsplash.com/random/600x600/?travel,paris", Location = "Paris, France", Caption = "The city of lights never fails to amaze me!", Likes = 42 },
        new { Image = "https://source.unsplash.com/random/600x600/?travel,tokyo", Location = "Tokyo, Japan", Caption = "Exploring the ancient temples and beautiful gardens of Kyoto.", Likes = 18 }
    };

    var currentPost = posts[(postId - 1) % posts.Length];
}

<div class="post-detail-container">
    <div class="post-card">
        <div class="post-header">
            <div class="post-user">
                <img src="~/images/default-profile.png" alt="Profile" class="post-profile-img" />
                <div class="post-user-info">
                    <div class="post-username">username <span class="post-date">• 2 hours ago</span></div>
                    <div class="post-location">@currentPost.Location</div>
                </div>
            </div>
            <div class="post-actions-top">
                <button class="delete-button" id="delete-post-btn">
                    <img src="~/images/delete-icon.png" alt="Delete" class="delete-icon" />
                </button>
            </div>
        </div>

        <div class="post-caption">
            @currentPost.Caption
        </div>

        <div class="post-image-container">
            <img src="@currentPost.Image" alt="Post image" class="post-image" />
        </div>

        <div class="post-actions">
            <div class="post-likes">
                <span>@currentPost.Likes likes</span>
            </div>
        </div>

        <div class="post-interaction">
            <button class="like-button">
                <img src="~/images/heart-icon.png" alt="Like" class="interaction-icon" />
            </button>
        </div>
    </div>

    <div class="back-button-container">
        <a href="/Home/Profile" class="back-button">Back</a>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal-overlay" id="delete-modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Delete Post?</h3>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete this post? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
            <button class="modal-button cancel-button" id="cancel-delete-btn">Cancel</button>
            <button class="modal-button confirm-button" id="confirm-delete-btn">Delete</button>
        </div>
    </div>
</div>

<!-- Include the same CSS and JavaScript from the previous Post.cshtml -->
<style>
    /* Same CSS as before */
    .main-content {
        background-color: white;
    }

    .right-navbar {
        display: none;
    }

    .main-content {
        margin-right: 0;
    }

    .post-detail-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 0 15px;
    }

    .post-card {
        background-color: white;
        border: 1px solid #dbdbdb;
        border-radius: 8px;
        margin-bottom: 24px;
        overflow: hidden;
    }

    .post-header {
        padding: 14px 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .post-user {
        display: flex;
        align-items: center;
    }

    .post-profile-img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        margin-right: 12px;
    }

    .post-user-info {
        display: flex;
        flex-direction: column;
    }

    .post-username {
        font-weight: 600;
        font-size: 14px;
        color: #262626;
    }

    .post-date {
        font-weight: normal;
        color: #898F99;
    }

    .post-location {
        font-size: 12px;
        color: #898F99;
    }

    .post-actions-top {
        display: flex;
        align-items: center;
    }

    .delete-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 4px;
    }

    .delete-icon {
        width: 16px;
        height: 16px;
    }

    .post-caption {
        padding: 0 16px 12px;
        font-size: 14px;
        line-height: 1.4;
        color: black;
    }

    .post-image-container {
        width: 100%;
        background-color: #f0f0f0;
    }

    .post-image {
        width: 100%;
        display: block;
        padding: 12px 16px;
        background-color: white;
    }

    .post-actions {
        display: flex;
        justify-content: space-between;
        padding: 12px 16px;
        border-bottom: 1px solid #efefef;
    }

    .post-likes {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #898F99;
    }

    .post-interaction {
        display: flex;
        padding: 8px 16px;
    }

    .like-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        margin-right: 16px;
    }

    .interaction-icon {
        width: 16px;
        height: 16px;
        transition: filter 0.3s;
    }

    .liked .interaction-icon {
        filter: invert(27%) sepia(84%) saturate(5183%) hue-rotate(340deg) brightness(91%) contrast(99%);
    }

    .back-button-container {
        display: flex;
        justify-content: flex-start;
        margin-bottom: 30px;
    }

    .back-button {
        padding: 8px 24px;
        background-color: #2F4F4F;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        text-decoration: none;
        transition: background-color 0.2s;
    }

        .back-button:hover {
            background-color: #3d6666;
        }

    /* Modal Styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

        .modal-overlay.active {
            display: flex;
        }

    .modal-content {
        background-color: white;
        border-radius: 12px;
        width: 400px;
        max-width: 90%;
        overflow: hidden;
    }

    .modal-header {
        padding: 20px 20px 0;
        text-align: center;
    }

    .modal-title {
        font-size: 18px;
        font-weight: 600;
        color: black;
        margin: 0;
    }

    .modal-body {
        padding: 15px 20px;
        text-align: center;
    }

        .modal-body p {
            color: #898F99;
            font-size: 14px;
            line-height: 1.4;
            margin: 0;
        }

    .modal-footer {
        display: flex;
        border-top: 1px solid #efefef;
    }

    .modal-button {
        flex: 1;
        padding: 14px;
        border: none;
        background: none;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .modal-button:not(:last-child) {
            border-right: 1px solid #efefef;
        }

    .cancel-button {
        color: #262626;
    }

        .cancel-button:hover {
            background-color: #f8f8f8;
        }

    .confirm-button {
        color: #ED4956;
        font-weight: 600;
    }

        .confirm-button:hover {
            background-color: #fdf2f2;
        }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Like button functionality
        const likeButton = document.querySelector('.like-button');
        likeButton.addEventListener('click', function() {
            this.classList.toggle('liked');

            const likesElement = document.querySelector('.post-likes span');
            let likeCount = parseInt(likesElement.textContent);

            if (this.classList.contains('liked')) {
                likeCount += 1;
            } else {
                likeCount = Math.max(0, likeCount - 1);
            }

            likesElement.textContent = `${likeCount} likes`;
        });

        // Delete post functionality with custom modal
        const deleteBtn = document.getElementById('delete-post-btn');
        const deleteModal = document.getElementById('delete-modal');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');

        // Show modal when delete button is clicked
        deleteBtn.addEventListener('click', function() {
            deleteModal.classList.add('active');
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        });

        // Hide modal when cancel button is clicked
        cancelDeleteBtn.addEventListener('click', function() {
            hideModal();
        });

        // Hide modal when clicking outside the modal content
        deleteModal.addEventListener('click', function(e) {
            if (e.target === deleteModal) {
                hideModal();
            }
        });

        // Hide modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && deleteModal.classList.contains('active')) {
                hideModal();
            }
        });

        // Confirm delete functionality
        confirmDeleteBtn.addEventListener('click', function() {
            // Here you would typically send a request to the server to delete the post
            hideModal();

            // Show success message (you can customize this further)
            showSuccessMessage('Post deleted successfully!');

            // Redirect to profile after a short delay
            setTimeout(function() {
                window.location.href = '/Home/Profile';
            }, 1500);
        });

        function hideModal() {
            deleteModal.classList.remove('active');
            document.body.style.overflow = ''; // Restore scrolling
        }

        function showSuccessMessage(message) {
            // Create a temporary success message
            const successDiv = document.createElement('div');
            successDiv.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                background-color: white;
                color: black;
                padding: 12px 20px;
                border-radius: 4px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                z-index: 1001;
                font-size: 14px;
            `;
            successDiv.textContent = message;

            document.body.appendChild(successDiv);

            // Remove the message after 3 seconds
            setTimeout(function() {
                if (successDiv.parentNode) {
                    successDiv.parentNode.removeChild(successDiv);
                }
            }, 3000);
        }
    });
</script>